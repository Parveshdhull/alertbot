#!/usr/bin/python3
# Modification as per personal use case

import argparse, subprocess, os, re, pickle
from datetime import datetime
from pathlib import Path

today = datetime.now()

day = today.strftime('%d')
month = today.strftime('%m')
year = today.strftime('%Y')
hour = today.strftime('%H')
mins = today.strftime('%M')

current_timestamp = today.timestamp()
lastrun_timestamp = 0

fails = []
heading1 = ""
heading2 = ""
allowed_gap = 60*60*24*2		# If program is used after long time, it will send only last two days reminders

def get_arguments():
	parser = argparse.ArgumentParser()
	parser.add_argument("-r", "--reminders-file", dest="reminders", help="Reminders File", required=True)
	arguments = parser.parse_args()
	return arguments

def send_message(message):
	global fails
	exit_code =	 subprocess.call(["signal-cli", "send", "-g", "yvaBCM9NvQheOmyhdlpJcV+bDSvh+LLH9OuOCCuMf90=", "-m", message])
	if exit_code != 0:
		fails += [message]

def read_lastrun():
	global lastrun_timestamp
	run_file = Path(str(Path.home())+"/.config/alertbot/run.log")
	if run_file.is_file():
		with open(run_file) as f:
			lastrun_timestamp = float(f.read())
	

def save_lastrun():
	run_file = Path(str(Path.home())+"/.config/alertbot/run.log")
	parent = run_file.parent
	Path(parent).mkdir(parents=True, exist_ok=True)
	with open(run_file, "w") as f:
		f.write(str(current_timestamp))


def send_failed():
	fails_file = Path(str(Path.home())+"/.config/alertbot/fails.log")
	if fails_file.is_file():
		with open(fails_file, "rb") as f:
			fails = pickle.load(f)
			print(fails)
			for line in fails:
				send_message(line)


def write_failed():
	fails_file = Path(str(Path.home())+"/.config/alertbot/fails.log")
	parent = fails_file.parent
	Path(parent).mkdir(parents=True, exist_ok=True)
	with open(fails_file, "wb") as f:
		pickle.dump(fails, f )


def validate(line, f, original_content):
	words = line.split('"')
	date = words[0].strip()
	message = words[1]
	time = words[2].strip()
	reminder_timestamp = 0

	try:
		reminder_time = datetime.strptime(date+" "+time, '%Y-%m-%d %H:%M')
		reminder_timestamp = reminder_time.timestamp()
	except Exception as e:
		send_message("Reminder Syntax Wrong")

	if reminder_timestamp <= current_timestamp:
		if reminder_timestamp > lastrun_timestamp:
			if (current_timestamp-reminder_timestamp) < allowed_gap:
				message = heading1 + " -> " + heading2 + "\n" + ("-"*35) + "\n" + message + "\n" + ("-"*35)
				send_message(message)


def process_line(line, f, original_content):
	global heading1, heading2
	line = line.strip()
	if "**" in line:
		line = line.replace("**","")
		line  = line.strip()
		heading2 = line
	elif "*" in line:
		line = line.replace("*","")
		line  = line.strip()
		heading1 = line
	else:
		pattern_once = '\d+-\d+-\d+\s".+"\s\d+:\d+'
		pattern_yearly = '\d+-\d+\s".+"\s\d+:\d+'
		pattern_monthly = '\d+\s".+"\s\d+:\d+'
		pattern_daily = '".+"\s\d+:\d+'

		matched = True
		if re.match(pattern_once, line):
			pass
		elif re.match(pattern_yearly, line):
			line = year + "-" + line
		elif re.match(pattern_monthly, line):
			line = year + "-" + month + "-" + line
		else:
			matched = False
		if matched:
			validate(line, f, original_content)

def main_proces():
	reminders_file = Path(reminders)
	if reminders_file.is_file():
		with open(reminders_file) as f:
			for line in f:
				process_line(line, None, None)
	else:
		print("[Error] - File not found!")


def start():
	read_lastrun()
	send_failed()
	main_proces()
	write_failed()
	save_lastrun()


arguments = get_arguments()
reminders = arguments.reminders

start()